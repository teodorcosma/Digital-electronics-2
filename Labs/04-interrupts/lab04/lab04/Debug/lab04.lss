
lab04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097b  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e5  00000000  00000000  00000c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034d  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000016a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015d  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num); // set output to high
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_nopull>:
  98:	fc 01       	movw	r30, r24
  9a:	80 81       	ld	r24, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_nopull+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_nopull+0xa>
  aa:	20 95       	com	r18
  ac:	82 23       	and	r24, r18
  ae:	80 83       	st	Z, r24
  b0:	81 81       	ldd	r24, Z+1	; 0x01
  b2:	28 23       	and	r18, r24
  b4:	21 83       	std	Z+1, r18	; 0x01
  b6:	08 95       	ret

000000b8 <GPIO_write_low>:
  b8:	fc 01       	movw	r30, r24
  ba:	90 81       	ld	r25, Z
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <GPIO_write_low+0xe>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <GPIO_write_low+0xa>
  ca:	20 95       	com	r18
  cc:	29 23       	and	r18, r25
  ce:	20 83       	st	Z, r18
  d0:	08 95       	ret

000000d2 <GPIO_toggle>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
  d2:	fc 01       	movw	r30, r24
  d4:	40 81       	ld	r20, Z
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <GPIO_toggle+0xe>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <GPIO_toggle+0xa>
  e4:	24 27       	eor	r18, r20
  e6:	20 83       	st	Z, r18
  e8:	08 95       	ret

000000ea <GPIO_read>:
/**********************************************************************
 * Function: GPIO_read()
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
    if (bit_is_set(*reg_name,pin_num)) 
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <GPIO_read+0xc>
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <GPIO_read+0x8>
      return 1;
       else
      return 0;
    
  fa:	81 70       	andi	r24, 0x01	; 1
  fc:	08 95       	ret

000000fe <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  fe:	65 e0       	ldi	r22, 0x05	; 5
 100:	84 e2       	ldi	r24, 0x24	; 36
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D1);
 108:	65 e0       	ldi	r22, 0x05	; 5
 10a:	85 e2       	ldi	r24, 0x25	; 37
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 5c 00 	call	0xb8	; 0xb8 <GPIO_write_low>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	80 83       	st	Z, r24
 11c:	80 81       	ld	r24, Z
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 122:	ef e6       	ldi	r30, 0x6F	; 111
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
//configure push button
    GPIO_config_input_nopull(&DDRC, BUTTON_S1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	87 e2       	ldi	r24, 0x27	; 39
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_nopull>
    // Enables interrupts by setting the global interrupt mask
    sei();
 136:	78 94       	sei
        {
            TIM1_overflow_33ms();
        }
      else
        {
            TIM1_overflow_262ms();
 138:	c1 e8       	ldi	r28, 0x81	; 129
 13a:	d0 e0       	ldi	r29, 0x00	; 0
    // Enables interrupts by setting the global interrupt mask
    sei();

    // Infinite loop
    while (1)
    {if(GPIO_read(&PINC, BUTTON_S1)== 0)//pushbutton is pressed
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	86 e2       	ldi	r24, 0x26	; 38
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 75 00 	call	0xea	; 0xea <GPIO_read>
 146:	81 11       	cpse	r24, r1
 148:	07 c0       	rjmp	.+14     	; 0x158 <main+0x5a>
        {
            TIM1_overflow_33ms();
 14a:	88 81       	ld	r24, Y
 14c:	8a 7f       	andi	r24, 0xFA	; 250
 14e:	88 83       	st	Y, r24
 150:	88 81       	ld	r24, Y
 152:	82 60       	ori	r24, 0x02	; 2
 154:	88 83       	st	Y, r24
 156:	f2 cf       	rjmp	.-28     	; 0x13c <main+0x3e>
        }
      else
        {
            TIM1_overflow_262ms();
 158:	88 81       	ld	r24, Y
 15a:	8b 7f       	andi	r24, 0xFB	; 251
 15c:	88 83       	st	Y, r24
 15e:	88 81       	ld	r24, Y
 160:	83 60       	ori	r24, 0x03	; 3
 162:	88 83       	st	Y, r24
 164:	eb cf       	rjmp	.-42     	; 0x13c <main+0x3e>

00000166 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	4f 93       	push	r20
 176:	5f 93       	push	r21
 178:	6f 93       	push	r22
 17a:	7f 93       	push	r23
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	af 93       	push	r26
 182:	bf 93       	push	r27
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31

    // WRITE YOUR CODE HERE
    GPIO_toggle(&PORTB, LED_D1);
 188:	65 e0       	ldi	r22, 0x05	; 5
 18a:	85 e2       	ldi	r24, 0x25	; 37
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_toggle>
    
    
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
